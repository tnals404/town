<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Dao.BoardDAO">

 <!-- 선택된 게시물 조회수 1 증가 -->
<update id="updateViewcnt" parameterType="int">
	update board set view_cnt = view_cnt +1 where board_id=#{board_id} and printout is true
</update>

 <!-- 선택된 게시물 조회 -->
<select id="getDetail" resultType="boarddto" parameterType="int">
	select * from board where board_id=#{board_id} and printout is true
</select>

<!-- 해당글의 댓글, 대댓글 전체 개수 가져오기  -->
<select id="getTotalCommentcnt" resultType="int" parameterType="int">
	select count(*) from comment where board_id=#{board_id} and printout is true
</select>

<!-- 해당글의 댓글, 대댓글 전체조회 + 페이징처리 
<select id="commentPagingList" resultType="commentdto" parameterType="hashmap">
	select * from comment where ${colname} = #{colvalue} order by comment_time asc limit ${limitindex}, ${limitcount}
</select>-->


<!-- 글쓴사람 정보(게시판 프사) -->
<select id="boardWriterProfile" resultType="memberdto" parameterType="String">
	select * from member where member_id=#{writer}
</select>

<!-- 해당글의 댓글, 대댓글 전체 가져오기 -->
<select id="oneBoardComments" resultType="commentdto" parameterType="int">
	select * from comment where board_id=#{board_id} and printout is true
</select> 

<!-- 댓글쓰기 (사진O) -->
 <insert id="insertComment" parameterType="commentdto">
	insert into comment (comment_writer, comment_contents, comment_imgurl, board_id) 
			values (#{comment_writer}, #{comment_contents}, #{comment_imgurl}, #{board_id})
</insert>

<!-- 댓글 삭제 -->
<!-- <delete id="deleteComment" parameterType="int">
	delete from comment where comment_id=#{comment_id}
</delete> -->
<update id="deleteComment" parameterType="int">
	update comment set printout=false where comment_id=#{comment_id}
</update>

<!-- 글 좋아요 여부 -->
<select id="isGoodOrHate" resultType="goodhatedto" parameterType="goodhatedto">
	select * from good_or_hate where board_id = #{board_id} and member_id = #{member_id}
</select>

<!-- 좋아요 추가 -->
 <insert id="addGood" parameterType="goodhatedto">
 	insert into good_or_hate (board_id, member_id, good) value (#{board_id}, #{member_id}, #{good})
</insert>

<!-- 싫어요 추가 -->
 <insert id="addHate" parameterType="goodhatedto">
 	insert into good_or_hate (board_id, member_id, hate) value (#{board_id}, #{member_id}, #{hate})
</insert>

<!-- 좋아요, 싫어요 삭제 -->
<delete id="deleteGoodOrHate" parameterType="goodhatedto">
	delete from good_or_hate where board_id = #{board_id} and member_id = #{member_id}
</delete>

<!-- 좋아요 추가시 보드cnt 업데이트 -->
 <update id="plusGoodCnt" parameterType="int">
 	update board set good_cnt = good_cnt +1, sum = sum + 1 where board_id = #{board_id}
</update>

<!-- 좋아요 취소시 보드cnt 업데이트 / cnt값 음수로 가지 않게 조건주기 -->
 <update id="minusGoodCnt" parameterType="int">
 	update board set good_cnt = CASE WHEN good_cnt > 0 THEN good_cnt -1 ELSE 0 END , sum = CASE WHEN sum > 0 THEN sum - 1 ELSE 0 END where board_id = #{board_id}
</update>

<!-- 싫어요 추가시 보드cnt 업데이트 / cnt값 음수로 가지 않게 조건주기 -->
 <update id="plusHateCnt" parameterType="int">
 	update board set hate_cnt = hate_cnt +1, sum = CASE WHEN sum > 0 THEN sum - 1 ELSE 0 END where board_id = #{board_id}
</update>

<!-- 싫어요 취소시 보드cnt 업데이트 / cnt값 음수로 가지 않게 조건주기 -->
 <update id="minusHateCnt" parameterType="int">
 	update board set hate_cnt = CASE WHEN hate_cnt > 0 THEN hate_cnt -1 ELSE 0 END, sum = sum + 1 where board_id = #{board_id}
</update>


<!-- Paging -->
<!-- 사진게시판 글 갯수 -->
<select id="getBoardCnt" resultType="int" parameterType="Pagination.SearchDTO">
	select count(*) 
	from board 
	where board_name_inner = #{searchType1} and town_id = #{searchType2} and printout is true
</select> 

<!-- 사진게시판 글 목록 가져오기 -->
<select id="getBoardList" resultType="boarddto" parameterType="Pagination.SearchDTO">
	select * 
	from board 
	where board_name_inner = #{searchType1} and town_id = #{searchType2} and printout is true
	order by writing_time desc, board_id desc
	limit #{pagination.limitStart}, #{recordSize}
</select>


<!-- 글 삭제(실은 숨김처리) -->
<!-- <delete id="deleteBoard" parameterType="int">
	delete from board where board_id=#{board_id}
</delete> -->
<update id="deleteBoard" parameterType="int">
	update board set printout=false where board_id=#{board_id}
</update>

<!-- 대댓글 작성(사진O) -->
 <insert id="insertRecomment" parameterType="commentdto">
	insert into comment (comment_writer, comment_contents, comment_imgurl, parent_id, board_id) 
			values (#{comment_writer}, #{comment_contents}, #{comment_imgurl}, #{parent_id}, #{board_id})
</insert>

<!-- 댓글 수정(사진X)-->
<update id="updateComment" parameterType="commentdto">
	update comment set comment_contents=#{comment_contents}, comment_imgurl=#{comment_imgurl}, comment_updateTime=now() where comment_id=#{comment_id}
</update>


<!-- paging -->
<!-- 댓글 갯수 -->
<select id="getCommentCnt" resultType="int" parameterType="Pagination.SearchDTO">
	select count(*) 
	from comment
	where board_id = #{searchType1}
</select> 

<!-- 해당 글의 댓글 목록 가져오기 -->
<select id="getCommentList" resultType="commentdto" parameterType="Pagination.SearchDTO">
	SELECT *
	FROM comment
	where board_id = #{searchType1}
	ORDER BY IF(parent_id=0, comment_id, parent_id), comment_time
	limit #{pagination.limitStart}, #{recordSize}
</select>

<!-- 해당 댓글의 대댓글이 있는지 확인 -->
<select id="getRecommentCnt" resultType="int" parameterType="int">
	select count(*) from comment where parent_id = #{comment_id} and printout is true
</select> 
<!-- 댓글 삭제(지만 실은 수정) -->
<!-- <update id="deleteUpdateComment" parameterType="commentdto">
	update comment set comment_writer=null, comment_contents=#{comment_contents}, comment_imgurl=null where comment_id=#{comment_id}
</update> -->
<!-- 댓글 삭제(지만 실은 수정) -->
<update id="deleteUpdateComment" parameterType="commentdto">
	update comment set printout=false where comment_id=#{comment_id}
</update>

<!-- 글 수정하기 -->
<update id="updateBoard" parameterType="boarddto">
	update board set 
	board_name_inner=#{board_name_inner}, 
	board_title=#{board_title}, 
	board_contents=#{board_contents}, 
	board_imgurl=#{board_imgurl}, 
	board_preview=#{board_preview}, 
	place_name=#{place_name}, 
	place_road_address=#{place_road_address}, 
	place_address=#{place_address}, 
	place_tel=#{place_tel}, 
	place_lat=#{place_lat}, 
	place_long=#{place_long}, 
	update_time=now() 
	where 
	board_id=#{board_id}
</update>


<!-- 포토 보드 검색 -->
<!-- 검색에 맞는 보드 갯수 조회 -->
<select id="searchPhotoBoardCnt" resultType="int" parameterType="Pagination.SearchDTO">
	select count(*) 
	from board 
	where board_name_inner = #{searchType1} and town_id = #{searchType2} and printout is true
	<choose>
		<!-- 검색 조건 있을때 -->
		<when test="searchType3 != 'all'">
			and ${searchType3} LIKE CONCAT('%', #{keyword}, '%')
		</when>	
		
		<!-- 전체 검색일 때 -->
		<otherwise>
		    AND (
		          board_title LIKE CONCAT('%', #{keyword}, '%')
		          or board_contents LIKE CONCAT('%', #{keyword}, '%')
		          or writer LIKE CONCAT('%', #{keyword}, '%')
		    )
		</otherwise>
	</choose>
</select>

<!-- 검색 보드 리스트 -->
<select id="searchPhotoBoardList" resultType="boarddto" parameterType="Pagination.SearchDTO">
	select * 
	from board 
	where board_name_inner = #{searchType1} and town_id = #{searchType2} and printout is true
	<choose>
		<!-- 검색 조건 있을때 -->
		<when test="searchType3 != 'all'">
			and ${searchType3} LIKE CONCAT('%', #{keyword}, '%')
		</when>	
		
		<!-- 전체 검색일 때 -->
		<otherwise>
		    AND (
		          board_title LIKE CONCAT('%', #{keyword}, '%')
		          or board_contents LIKE CONCAT('%', #{keyword}, '%')
		          or writer LIKE CONCAT('%', #{keyword}, '%')
		    )
		</otherwise>
	</choose>
	order by writing_time desc, board_id desc
	limit #{pagination.limitStart}, #{recordSize}
</select>

<!-- 해당 글이 있는지 확인 -->
<select id="existBoard" resultType="int" parameterType="int">
	select count(*) from board where board_id = #{board_id} and printout is true
</select> 

<!-- 회원 탈퇴시 작성한 글, 댓글 모두 출력값 false로 -->
<update id="deleteAllBoard" parameterType="String">
	update board set printout=false where writer=#{member_id}
</update>
<update id="deleteAllComment" parameterType="String">
	update comment set printout=false where comment_writer=#{member_id}
</update>

<!-- 댓글 작성시 포인트테이블에 넣기 -->
<insert id="insertPointComment" parameterType="pointdto">
	insert point (member_id, point_method, point_get) 
		values (#{member_id}, #{point_method}, #{point_get})
</insert>
 
<!-- 댓글 작성시 해당회원에게 3점 부여 -->
<update id="updateMemberPointComment" parameterType="pointdto">
	update member set point = point + #{point_get} where member_id = #{member_id}
</update>

<!-- 회원 등급 이미지 가져오기 -->
<select id="getMemberGrdaeImg" parameterType="String" resultType="String">
	select grade_image from grade g join member m
	on g.grade_name = m.grade_name 
	where member_id = #{member_id}
</select>

<!-- 소모임 채팅 생성 여부 확인 -->
<select id="Check" parameterType="int" resultType="int">
select count(board_id) from gchat_room where board_id = #{board_id}
</select>

</mapper>

